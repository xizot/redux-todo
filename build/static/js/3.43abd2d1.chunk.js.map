{"version":3,"sources":["hooks/use-input.js","components/UI/Button.js","components/UI/Button.module.css","components/Tasks/Tasks.module.css","components/Tasks/TaskItem/TaskItem.module.css","components/UI/Modal.module.css","components/Tasks/TaskEditModal/TaskEditModal.module.css","components/Tasks/TaskItem/TaskItem.js","actions/task-actions.js","components/UI/Modal.js","components/Tasks/TaskEditModal/TaskEditModal.js","components/Tasks/Tasks.js"],"names":["initialState","value","isTouched","inputStateReducer","state","action","type","useInput","validateFn","useReducer","inputState","dispatch","valueIsValid","hasError","isValid","valueInputChangeHandler","event","target","valueInputBlurHandler","inputResetHandler","Button","text","onClick","buttonConfig","buttonClasses","classes","button","alt","className","module","exports","TaskItem","title","id","isDone","onShowEditModal","useDispatch","itemClasses","htmlFor","taskId","a","headers","useAuthorization","createBrowserHistory","push","httpAddTask","tasksActions","resetErrorState","axios","put","process","response","responseData","data","updateComplete","errorMessage","message","taskErrorHandler","toggleCompleted","actions","icon","edit","trash","httpDeleteTask","delete","removeTask","BackDrop","onClose","backdrop","ModalOverlay","children","modal","content","portalElement","document","getElementById","Modal","ReactDOM","createPortal","TaskEditModal","onCloseEditModal","useState","isChanged","setIsChanged","isEmpty","enteredTaskEdit","enteredTaskEditIsValid","taskEditHasError","taskEditBlurHandler","taskEditChangeHandler","taskInputClasess","loginFormClasses","invalid","onSubmit","preventDefault","httpUpdateTitle","updateTitle","form","onBlur","onChange","Tasks","props","tasks","useSelector","notCompletedTasks","completedTasks","isShownModal","isFetchingData","taskEdit","setTaskEdit","enteredTask","enteredTaskIsValid","taskBlurHandler","taskChangeHandler","taskReset","showEditModalHandler","prevState","showModal","useEffect","fetchTasks","fetchingData","get","tasksData","replaceCurrentTasks","getTasksError","tasksList","length","map","task","completedList","completed","index","closeModal","container","post","addTask"],"mappings":"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","file":"static/js/3.43abd2d1.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialState = {\n    value: \"\",\n    isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n    if (action.type === \"INPUT\") {\n        return { ...state, value: action.value };\n    }\n    if (action.type === \"BLUR\") {\n        return { ...state, isTouched: true };\n    }\n    if (action.type === \"RESET\") {\n        return initialState;\n    }\n    return initialState;\n};\nexport const useInput = (validateFn) => {\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialState);\n    const valueIsValid = validateFn(inputState.value);\n    const hasError = inputState.isTouched && !valueIsValid;\n\n    const valueInputChangeHandler = (event) => {\n        dispatch({\n            type: \"INPUT\",\n            value: event.target.value,\n        });\n    };\n    const valueInputBlurHandler = () => {\n        dispatch({ type: \"BLUR\" });\n    };\n    const inputResetHandler = () => {\n        dispatch({ type: \"RESET\" });\n    };\n    return {\n        value: inputState.value,\n        isValid: valueIsValid,\n        hasError,\n        valueInputChangeHandler,\n        valueInputBlurHandler,\n        inputResetHandler,\n    };\n};\n","import classes from \"./Button.module.css\";\n\nconst Button = ({ text, onClick, buttonConfig }) => {\n    const buttonClasses = `${classes.button} ${\n        buttonConfig?.alt ? classes[\"button-alt\"] : \"\"\n    }`;\n\n    return (\n        <button onClick={onClick} {...buttonConfig} className={buttonClasses}>\n            {text}\n        </button>\n    );\n};\nexport default Button;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2jvWY\",\"button-alt\":\"Button_button-alt__3fYkt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasks\":\"Tasks_tasks__3d3TR\",\"tasks-list\":\"Tasks_tasks-list__2xQOM\",\"not-completed\":\"Tasks_not-completed__1s8IX\",\"completed\":\"Tasks_completed__CXxF9\",\"container\":\"Tasks_container__6k_iH\",\"tasks-input\":\"Tasks_tasks-input__2Lyxj\",\"invalid\":\"Tasks_invalid__1EpM8\",\"text-helper\":\"Tasks_text-helper__rxgIR\",\"no-task\":\"Tasks_no-task__1hrSH\",\"loading-data\":\"Tasks_loading-data__9042Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task-item\":\"TaskItem_task-item__86WYo\",\"up\":\"TaskItem_up__26cew\",\"check-box\":\"TaskItem_check-box__LbGYm\",\"actions\":\"TaskItem_actions__LTM6W\",\"icon\":\"TaskItem_icon__kDuDb\",\"edit\":\"TaskItem_edit__2rENc\",\"trash\":\"TaskItem_trash__1Svc8\",\"is-done\":\"TaskItem_is-done__lqTqG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__2OQxp\",\"modal\":\"Modal_modal__1V9YM\",\"slide-down\":\"Modal_slide-down__32lmt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"actions\":\"TaskEditModal_actions__3vnDP\"};","import React from \"react\";\nimport classes from \"./TaskItem.module.css\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { BiEditAlt } from \"react-icons/bi\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteTask, toggleCompleted } from \"../../../actions/task-actions\";\n\nconst TaskItem = ({ title, id, isDone, onShowEditModal }) => {\n    const dispatch = useDispatch();\n\n    const toggleTaskCompeletedHandler = () => {\n        dispatch(\n            toggleCompleted({\n                taskId: id,\n                isDone,\n            })\n        );\n    };\n    const removeTaskHandler = () => {\n        dispatch(deleteTask(id));\n    };\n    const showEditModalHandler = () => {\n        onShowEditModal({ title, id });\n    };\n    const itemClasses = `${classes[\"task-item\"]} ${\n        isDone ? classes[\"is-done\"] : \"\"\n    }`;\n\n    return (\n        <li className={itemClasses}>\n            <label\n                htmlFor={id}\n                className={classes[\"check-box\"]}\n                onClick={toggleTaskCompeletedHandler}\n            ></label>\n            <p>{title}</p>\n            <div className={classes.actions}>\n                <BiEditAlt\n                    className={`${classes.icon} ${classes.edit}`}\n                    onClick={showEditModalHandler}\n                />\n                <BsTrash\n                    className={`${classes.icon} ${classes.trash}`}\n                    onClick={removeTaskHandler}\n                />\n            </div>\n        </li>\n    );\n};\n\nexport default TaskItem;\n","import axios from \"axios\";\nimport { createBrowserHistory } from \"history\";\nimport { useAuthorization } from \"../helpers\";\nimport { tasksActions } from \"../reducers/task\";\n\nexport const getTasks = () => async (dispatch) => {\n    const headers = useAuthorization();\n    if (!headers) {\n        createBrowserHistory().push(\"/login\");\n        return;\n    }\n\n    const fetchTasks = async () => {\n        dispatch(tasksActions.fetchingData());\n        dispatch(tasksActions.resetErrorState());\n        const tasks = await axios.get(\n            `${process.env.REACT_APP_BACKEND_URI}/todo`,\n            {\n                headers,\n            }\n        );\n\n        const tasksData = tasks.data;\n        dispatch(tasksActions.replaceCurrentTasks(tasksData));\n    };\n\n    try {\n        await fetchTasks();\n    } catch (error) {\n        const errorMessage = error.response?.message || \"Something went wrong!\";\n        dispatch(\n            tasksActions.getTasksError({\n                errorMessage,\n            })\n        );\n    }\n};\n\nexport const deleteTask = (taskId) => async (dispatch) => {\n    const headers = useAuthorization();\n\n    if (!headers) {\n        createBrowserHistory().push(\"/login\");\n        return;\n    }\n    const httpDeleteTask = async () => {\n        dispatch(tasksActions.resetErrorState());\n        const response = await axios.delete(\n            `${process.env.REACT_APP_BACKEND_URI}/todo/${taskId}`,\n            {\n                headers,\n            }\n        );\n\n        const responseData = response.data;\n        dispatch(tasksActions.removeTask(responseData.data?.taskId));\n    };\n    try {\n        await httpDeleteTask();\n    } catch (error) {\n        const errorMessage = error.response?.message || \"Something went wrong!\";\n        dispatch(tasksActions.taskErrorHandler(errorMessage));\n    }\n};\n\nexport const addTask = (title) => async (dispatch) => {\n    const headers = useAuthorization();\n    if (!headers) {\n        createBrowserHistory().push(\"/login\");\n        return;\n    }\n    const httpAddTask = async () => {\n        dispatch(tasksActions.resetErrorState());\n        const response = await axios.post(\n            `${process.env.REACT_APP_BACKEND_URI}/todo`,\n            {\n                title,\n            },\n            {\n                headers,\n            }\n        );\n\n        const responseData = response.data;\n        dispatch(tasksActions.addTask(responseData.data));\n    };\n    try {\n        await httpAddTask();\n    } catch (error) {\n        const errorMessage = error.response?.message || \"Something went wrong!\";\n        dispatch(tasksActions.taskErrorHandler(errorMessage));\n    }\n};\n\nexport const updateTitle =\n    ({ taskId, title }) =>\n    async (dispatch) => {\n        const headers = useAuthorization();\n        if (!headers) {\n            createBrowserHistory().push(\"/login\");\n            return;\n        }\n        const httpUpdateTitle = async () => {\n            dispatch(tasksActions.resetErrorState());\n            const response = await axios.put(\n                `${process.env.REACT_APP_BACKEND_URI}/todo`,\n                {\n                    taskId,\n                    title,\n                },\n                {\n                    headers,\n                }\n            );\n\n            const responseData = response.data;\n            dispatch(tasksActions.updateTitle(responseData.data));\n        };\n        try {\n            await httpUpdateTitle();\n        } catch (error) {\n            const errorMessage =\n                error.response?.message || \"Something went wrong!\";\n            dispatch(tasksActions.taskErrorHandler(errorMessage));\n        }\n    };\n\nexport const toggleCompleted =\n    ({ taskId, isDone }) =>\n    async (dispatch) => {\n        const headers = useAuthorization();\n        if (!headers) {\n            createBrowserHistory().push(\"/login\");\n            return;\n        }\n        const httpAddTask = async () => {\n            dispatch(tasksActions.resetErrorState());\n            const response = await axios.put(\n                `${process.env.REACT_APP_BACKEND_URI}/todo`,\n                {\n                    taskId,\n                    isDone: !isDone,\n                },\n                {\n                    headers,\n                }\n            );\n\n            const responseData = response.data;\n            dispatch(tasksActions.updateComplete(responseData.data));\n        };\n        try {\n            await httpAddTask();\n        } catch (error) {\n            const errorMessage =\n                error.response?.message || \"Something went wrong!\";\n            dispatch(tasksActions.taskErrorHandler(errorMessage));\n        }\n    };\n","import classes from \"./Modal.module.css\";\nimport ReactDOM from \"react-dom\";\n\nconst BackDrop = ({ onClose }) => {\n    return <div className={classes.backdrop} onClick={onClose}></div>;\n};\n\nconst ModalOverlay = ({ children }) => {\n    return (\n        <div className={classes.modal}>\n            <div className={classes.content}>{children}</div>\n        </div>\n    );\n};\n\nconst portalElement = document.getElementById(\"overlayer\");\n\nconst Modal = ({ children, onClose }) => {\n    return (\n        <>\n            {ReactDOM.createPortal(\n                <BackDrop onClose={onClose} />,\n                portalElement\n            )}\n            {ReactDOM.createPortal(\n                <ModalOverlay children={children} />,\n                portalElement\n            )}\n        </>\n    );\n};\nexport default Modal;\n","import { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { isEmpty } from \"../../../helpers\";\nimport { useInput } from \"../../../hooks/use-input\";\nimport Modal from \"./../../UI/Modal\";\nimport classes from \"./TaskEditModal.module.css\";\nimport loginFormClasses from \"./../Tasks.module.css\";\nimport Button from \"../../UI/Button\";\nimport { updateTitle } from \"../../../actions/task-actions\";\nconst TaskEditModal = ({ id, title, onCloseEditModal }) => {\n    const [isChanged, setIsChanged] = useState(false);\n    const {\n        value: enteredTaskEdit,\n        isValid: enteredTaskEditIsValid,\n        hasError: taskEditHasError,\n        valueInputBlurHandler: taskEditBlurHandler,\n        valueInputChangeHandler: taskEditChangeHandler,\n    } = useInput(isEmpty);\n\n    const dispatch = useDispatch();\n    const changeTitleHandler = (event) => {\n        setIsChanged(true);\n        taskEditChangeHandler(event);\n    };\n    const taskInputClasess = `${loginFormClasses[\"tasks-input\"]} ${\n        taskEditHasError ? loginFormClasses.invalid : \"\"\n    }`;\n    const formUpdateTaskHandler = (event) => {\n        event.preventDefault();\n        if (!enteredTaskEditIsValid) {\n            return;\n        }\n        dispatch(\n            updateTitle({\n                taskId: id,\n                title: enteredTaskEdit,\n            })\n        );\n    };\n    return (\n        <Modal onClose={onCloseEditModal}>\n            <form\n                onSubmit={formUpdateTaskHandler}\n                className={loginFormClasses.form}\n            >\n                <input\n                    className={taskInputClasess}\n                    type=\"text\"\n                    value={(!isChanged && title) || enteredTaskEdit}\n                    onBlur={taskEditBlurHandler}\n                    onChange={changeTitleHandler}\n                />\n                <small className={loginFormClasses[\"text-helper\"]}>\n                    Edit task\n                </small>\n                <div className={classes.actions}>\n                    <Button\n                        text=\"Update\"\n                        buttonConfig={{\n                            alt: \"true\",\n                        }}\n                    />\n                    <Button\n                        onClick={onCloseEditModal}\n                        text=\"Cancel\"\n                        buttonConfig={{\n                            type: \"button\",\n                        }}\n                    ></Button>\n                </div>\n            </form>\n        </Modal>\n    );\n};\n\nexport default TaskEditModal;\n","import classes from \"./Tasks.module.css\";\nimport { useInput } from \"./../../hooks/use-input\";\nimport { isEmpty } from \"./../../helpers/index\";\nimport TaskItem from \"./TaskItem/TaskItem\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { tasksActions } from \"./../../reducers/task\";\nimport TaskEditModal from \"./TaskEditModal/TaskEditModal\";\nimport { useState } from \"react\";\nimport { addTask, getTasks } from \"../../actions/task-actions\";\nimport { useEffect } from \"react\";\nconst Tasks = (props) => {\n    const tasks = useSelector((state) => state.tasks.notCompletedTasks);\n    const completedTasks = useSelector((state) => state.tasks.completedTasks);\n    const isShownModal = useSelector((state) => state.tasks.isShownModal);\n    const isFetchingData = useSelector((state) => state.tasks.isFetchingData);\n    const [taskEdit, setTaskEdit] = useState({\n        id: null,\n        title: null,\n    });\n    const dispatch = useDispatch();\n\n    const {\n        value: enteredTask,\n        isValid: enteredTaskIsValid,\n        hasError,\n        valueInputBlurHandler: taskBlurHandler,\n        valueInputChangeHandler: taskChangeHandler,\n        inputResetHandler: taskReset,\n    } = useInput(isEmpty);\n\n    const formSubmitHandler = (event) => {\n        event.preventDefault();\n        if (!enteredTaskIsValid) {\n            return;\n        }\n        dispatch(addTask(enteredTask));\n\n        taskReset();\n    };\n\n    const showEditModalHandler = ({ id, title }) => {\n        setTaskEdit((prevState) => {\n            return {\n                id: id,\n                title: title,\n            };\n        });\n        dispatch(tasksActions.showModal());\n    };\n\n    useEffect(() => {\n        dispatch(getTasks());\n    }, [dispatch]);\n\n    const closeEditModalHandler = () => {\n        dispatch(tasksActions.closeModal());\n    };\n\n    const taskInputClasess = `${classes[\"tasks-input\"]} ${\n        hasError ? classes.invalid : \"\"\n    }`;\n\n    const tasksList = tasks.length\n        ? tasks.map((task) => (\n              <TaskItem\n                  key={task.taskId}\n                  id={task.taskId}\n                  title={task.title}\n                  isDone={task.isDone}\n                  onShowEditModal={showEditModalHandler}\n              />\n          ))\n        : !completedTasks.length && (\n              <p className={classes[\"no-task\"]}>\n                  You don't have any task to do\n              </p>\n          );\n    const completedList = completedTasks.length ? (\n        <div className={classes.completed}>\n            <h3>COMPLETED</h3>\n            {completedTasks.map((task, index) => (\n                <TaskItem\n                    key={index}\n                    id={task.taskId}\n                    title={task.title}\n                    isDone={task.isDone}\n                    onShowEditModal={showEditModalHandler}\n                />\n            ))}\n        </div>\n    ) : (\n        <></>\n    );\n\n    return (\n        <>\n            {isShownModal && (\n                <TaskEditModal\n                    id={taskEdit.id}\n                    title={taskEdit.title}\n                    onCloseEditModal={closeEditModalHandler}\n                />\n            )}\n\n            <div className={classes.tasks}>\n                <div className={classes.container}>\n                    <form onSubmit={formSubmitHandler}>\n                        <input\n                            className={taskInputClasess}\n                            type=\"text\"\n                            value={enteredTask}\n                            onBlur={taskBlurHandler}\n                            onChange={taskChangeHandler}\n                        />\n                        <small className={classes[\"text-helper\"]}>\n                            Add task\n                        </small>\n                    </form>\n                    <div className={classes[\"tasks-list\"]}>\n                        {isFetchingData ? (\n                            <p className={classes[\"loading-data\"]}>\n                                Loading Data...\n                            </p>\n                        ) : (\n                            <>\n                                <div className={classes[\"not-completed\"]}>\n                                    <ul>{tasksList}</ul>\n                                </div>\n                                {completedList}\n                            </>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Tasks;\n"],"sourceRoot":""}